import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class SimpleAntivirus {

    public static void main(String[] args) {
        String directoryPath = "C:\\Users\\Nate\\Downloads"; // enter user directory 
        scanDirectory(directoryPath);
    }

    public static void scanDirectory(String directoryPath) {
        File directory = new File(directoryPath);
        if (!directory.isDirectory()) {
            System.out.println("Invalid directory path.");
            return;
        }

        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isFile()) {
                    try {
                        if (containsVirusSignature(file)) {
                            System.out.println("Virus found in file: " + file.getAbsolutePath());
                        } else {
                            System.out.println("File is clean: " + file.getAbsolutePath());
                        }
                    } catch (IOException | NoSuchAlgorithmException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }

    public static boolean containsVirusSignature(File file) throws IOException, NoSuchAlgorithmException {
        // This is an example using a hardcoded virus signature.
        // this is just one virus signature, real ones use more than this. 
        String virusSignature = "fakevirus123";
        byte[] fileContent = Files.readAllBytes(file.toPath());
        String fileHash = calculateMD5(fileContent);

        return fileHash.equals(virusSignature);
    }

    public static String calculateMD5(byte[] data) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] hash = md.digest(data);

        StringBuilder result = new StringBuilder();
        for (byte b : hash) {
            result.append(String.format("%02x", b));
        }

        return result.toString();
    }
}
